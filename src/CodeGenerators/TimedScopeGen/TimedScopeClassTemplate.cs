// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Omex.CodeGenerators.TimedScopeGen
{
	using global::System.Linq;
	using System;

	/// <summary>
	/// Class to produce the template output
	/// </summary>

	#line 1 "TimedScopeClassTemplate.tt"
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
	public partial class TimedScopeClassTemplate : TimedScopeClassTemplateBase
	{
#line hidden
		/// <summary>
		/// Create the template output
		/// </summary>
		public virtual string TransformText()
		{
			this.Write(@"// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
//
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Microsoft.Omex.System.TimedScopes;

namespace ");

			#line 18 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(ScopeCollection.@namespace));

			#line default
			#line hidden
			this.Write("\r\n{\r\n\t/// <summary>\r\n\t/// Timed scopes\r\n\t/// </summary>\r\n\t[GeneratedCode(\"");

			#line 23 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));

			#line default
			#line hidden
			this.Write("\", \"");

			#line 23 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyVersion));

			#line default
			#line hidden
			this.Write("\")]\r\n\tpublic static class ");

			#line 24 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(TimedScopeClassName));

			#line default
			#line hidden
			this.Write(@"
	{
		/// <summary>
		/// Gets a Dictionary of ScopeName to ScopeDefinition for all Timed Scopes
		/// </summary>
		public static IReadOnlyDictionary<string, TimedScopeDefinition> AllScopeDefinitions
		{
			get
			{
				return s_scopeDefinitions.Value;
			}
		}

		/// <summary>
		/// Dictionary of ScopeName to ScopeDefinition for all Timed Scopes
		/// </summary>
		private static Lazy<Dictionary<string, TimedScopeDefinition>> s_scopeDefinitions = new Lazy<Dictionary<string, TimedScopeDefinition>>(
			() => new Dictionary<string, TimedScopeDefinition>(StringComparer.Ordinal)
		{
");

			#line 44 "TimedScopeClassTemplate.tt"

	foreach (TimedScopeArea area in ScopeCollection.TimedScopeArea.OrderBy(x => x.name))
	{
		foreach (TimedScope scope in area.TimedScope.OrderBy(x => x.name))
		{

			#line default
			#line hidden
			this.Write("\t\t\t{ ");

			#line 50 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(area.StrippedName()));

			#line default
			#line hidden
			this.Write(".");

			#line 50 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.name));

			#line default
			#line hidden
			this.Write(".Name, ");

			#line 50 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(area.StrippedName()));

			#line default
			#line hidden
			this.Write(".");

			#line 50 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.name));

			#line default
			#line hidden
			this.Write(" },\r\n");

			#line 51 "TimedScopeClassTemplate.tt"

		}
	}

			#line default
			#line hidden
			this.Write("\t\t});\r\n\r\n");

			#line 57 "TimedScopeClassTemplate.tt"

	foreach (TimedScopeArea area in ScopeCollection.TimedScopeArea.OrderBy(x => x.name))
	{

			#line default
			#line hidden
			this.Write("\t\t/// <summary>\r\n\t\t/// Timed scopes for ");

			#line 62 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(area.StrippedName()));

			#line default
			#line hidden
			this.Write("\r\n\t\t/// </summary>\r\n\t\tpublic static class ");

			#line 64 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(area.StrippedName()));

			#line default
			#line hidden
			this.Write("\r\n\t\t{\r\n");

			#line 66 "TimedScopeClassTemplate.tt"

	foreach (TimedScope scope in area.TimedScope.OrderBy(x => x.name))
	{

			#line default
			#line hidden
			this.Write("\t\t\t/// <summary>\r\n\t\t\t/// ");

			#line 71 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.name));

			#line default
			#line hidden
			this.Write(" Timed Scope\r\n\t\t\t/// </summary>\r\n\t\t\tpublic static TimedScopeDefinition ");

			#line 73 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.name));

			#line default
			#line hidden
			this.Write(" => new TimedScopeDefinition(\"");

			#line 73 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(area.StrippedName()));

			#line default
			#line hidden
			this.Write("_");

			#line 73 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.name));

			#line default
			#line hidden
			this.Write("\",\r\n\t\t\t\t\"");

			#line 74 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.FormatDescription()));

			#line default
			#line hidden
			this.Write("\"");

			#line 74 "TimedScopeClassTemplate.tt"
 if (scope.OCEHandBookLink != null)
					{

			#line default
			#line hidden
			this.Write(",\r\n\t\t\t\tlinkToOCEHandbook: @\"");

			#line 77 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.OCEHandBookLink));

			#line default
			#line hidden
			this.Write("\"");

			#line 77 "TimedScopeClassTemplate.tt"

	}

			#line default
			#line hidden

			#line 79 "TimedScopeClassTemplate.tt"
 if (scope.onDemand)
					{

			#line default
			#line hidden
			this.Write(",\r\n\t\t\t\tonDemand: ");

			#line 82 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.onDemand.ToString().ToLower()));

			#line default
			#line hidden

			#line 82 "TimedScopeClassTemplate.tt"

	}

			#line default
			#line hidden

			#line 84 "TimedScopeClassTemplate.tt"
 if (scope.capturesUniqueUserHashes)
					{

			#line default
			#line hidden
			this.Write(",\r\n\t\t\t\tcapturesUniqueUserHashes: ");

			#line 87 "TimedScopeClassTemplate.tt"
			this.Write(this.ToStringHelper.ToStringWithCulture(scope.capturesUniqueUserHashes.ToString().ToLower()));

			#line default
			#line hidden

			#line 87 "TimedScopeClassTemplate.tt"

	}

			#line default
			#line hidden
			this.Write(");\r\n\r\n");

			#line 91 "TimedScopeClassTemplate.tt"

	}

			#line default
			#line hidden
			this.Write("\r\n\t\t}\r\n\r\n\r\n");

			#line 98 "TimedScopeClassTemplate.tt"

	}

			#line default
			#line hidden
			this.Write("\r\n\t}\r\n}\r\n");
			return this.GenerationEnvironment.ToString();
		}
	}

	#line default
	#line hidden
	#region Base class
	/// <summary>
	/// Base class for this transformation
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
	public class TimedScopeClassTemplateBase
	{
		#region Fields
		private global::System.Text.StringBuilder generationEnvironmentField;
		private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
		private global::System.Collections.Generic.List<int> indentLengthsField;
		private string currentIndentField = "";
		private bool endsWithNewline;
		private global::System.Collections.Generic.IDictionary<string, object> sessionField;
		#endregion
		#region Properties
		/// <summary>
		/// The string builder that generation-time code is using to assemble generated output
		/// </summary>
		protected global::System.Text.StringBuilder GenerationEnvironment
		{
			get
			{
				if ((this.generationEnvironmentField == null))
				{
					this.generationEnvironmentField = new global::System.Text.StringBuilder();
				}
				return this.generationEnvironmentField;
			}
			set
			{
				this.generationEnvironmentField = value;
			}
		}
		/// <summary>
		/// The error collection for the generation process
		/// </summary>
		public global::System.CodeDom.Compiler.CompilerErrorCollection Errors
		{
			get
			{
				if ((this.errorsField == null))
				{
					this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
				}
				return this.errorsField;
			}
		}
		/// <summary>
		/// A list of the lengths of each indent that was added with PushIndent
		/// </summary>
		private global::System.Collections.Generic.List<int> indentLengths
		{
			get
			{
				if ((this.indentLengthsField == null))
				{
					this.indentLengthsField = new global::System.Collections.Generic.List<int>();
				}
				return this.indentLengthsField;
			}
		}
		/// <summary>
		/// Gets the current indent we use when adding lines to the output
		/// </summary>
		public string CurrentIndent
		{
			get
			{
				return this.currentIndentField;
			}
		}
		/// <summary>
		/// Current transformation session
		/// </summary>
		public virtual global::System.Collections.Generic.IDictionary<string, object> Session
		{
			get
			{
				return this.sessionField;
			}
			set
			{
				this.sessionField = value;
			}
		}
		#endregion
		#region Transform-time helpers
		/// <summary>
		/// Write text directly into the generated output
		/// </summary>
		public void Write(string textToAppend)
		{
			if (string.IsNullOrEmpty(textToAppend))
			{
				return;
			}
			// If we're starting off, or if the previous text ended with a newline,
			// we have to append the current indent first.
			if (((this.GenerationEnvironment.Length == 0)
						|| this.endsWithNewline))
			{
				this.GenerationEnvironment.Append(this.currentIndentField);
				this.endsWithNewline = false;
			}
			// Check if the current text ends with a newline
			if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
			{
				this.endsWithNewline = true;
			}
			// This is an optimization. If the current indent is "", then we don't have to do any
			// of the more complex stuff further down.
			if ((this.currentIndentField.Length == 0))
			{
				this.GenerationEnvironment.Append(textToAppend);
				return;
			}
			// Everywhere there is a newline in the text, add an indent after it
			textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
			// If the text ends with a newline, then we should strip off the indent added at the very end
			// because the appropriate indent will be added when the next time Write() is called
			if (this.endsWithNewline)
			{
				this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
			}
			else
			{
				this.GenerationEnvironment.Append(textToAppend);
			}
		}
		/// <summary>
		/// Write text directly into the generated output
		/// </summary>
		public void WriteLine(string textToAppend)
		{
			this.Write(textToAppend);
			this.GenerationEnvironment.AppendLine();
			this.endsWithNewline = true;
		}
		/// <summary>
		/// Write formatted text directly into the generated output
		/// </summary>
		public void Write(string format, params object[] args)
		{
			this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
		}
		/// <summary>
		/// Write formatted text directly into the generated output
		/// </summary>
		public void WriteLine(string format, params object[] args)
		{
			this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
		}
		/// <summary>
		/// Raise an error
		/// </summary>
		public void Error(string message)
		{
			global::System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
			error.ErrorText = message;
			this.Errors.Add(error);
		}
		/// <summary>
		/// Raise a warning
		/// </summary>
		public void Warning(string message)
		{
			global::System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
			error.ErrorText = message;
			error.IsWarning = true;
			this.Errors.Add(error);
		}
		/// <summary>
		/// Increase the indent
		/// </summary>
		public void PushIndent(string indent)
		{
			if ((indent == null))
			{
				throw new global::System.ArgumentNullException("indent");
			}
			this.currentIndentField = (this.currentIndentField + indent);
			this.indentLengths.Add(indent.Length);
		}
		/// <summary>
		/// Remove the last indent that was added with PushIndent
		/// </summary>
		public string PopIndent()
		{
			string returnValue = "";
			if ((this.indentLengths.Count > 0))
			{
				int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
				this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
				if ((indentLength > 0))
				{
					returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
					this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
				}
			}
			return returnValue;
		}
		/// <summary>
		/// Remove any indentation
		/// </summary>
		public void ClearIndent()
		{
			this.indentLengths.Clear();
			this.currentIndentField = "";
		}
		#endregion
		#region ToString Helpers
		/// <summary>
		/// Utility class to produce culture-oriented representation of an object as a string.
		/// </summary>
		public class ToStringInstanceHelper
		{
			private global::System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
			/// <summary>
			/// Gets or sets format provider to be used by ToStringWithCulture method.
			/// </summary>
			public global::System.IFormatProvider FormatProvider
			{
				get
				{
					return this.formatProviderField ;
				}
				set
				{
					if ((value != null))
					{
						this.formatProviderField  = value;
					}
				}
			}
			/// <summary>
			/// This is called from the compile/run appdomain to convert objects within an expression block to a string
			/// </summary>
			public string ToStringWithCulture(object objectToConvert)
			{
				if ((objectToConvert == null))
				{
					throw new global::System.ArgumentNullException("objectToConvert");
				}
				global::System.Type t = objectToConvert.GetType();
				global::System.Reflection.MethodInfo method = t.GetMethod("ToString", new global::System.Type[] {
							typeof(global::System.IFormatProvider)});
				if ((method == null))
				{
					return objectToConvert.ToString();
				}
				else
				{
					return ((string)(method.Invoke(objectToConvert, new object[] {
								this.formatProviderField })));
				}
			}
		}
		private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
		/// <summary>
		/// Helper to produce culture-oriented representation of an object as a string
		/// </summary>
		public ToStringInstanceHelper ToStringHelper
		{
			get
			{
				return this.toStringHelperField;
			}
		}
		#endregion
	}
	#endregion
}
