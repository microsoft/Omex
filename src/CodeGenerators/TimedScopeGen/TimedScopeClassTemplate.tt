<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Microsoft.Omex.System.Logging;

namespace <#= ScopeCollection.@namespace #>
{
	/// <summary>
	/// Timed scopes
	/// </summary>
	[GeneratedCode("<#= AssemblyName #>", "<#= AssemblyVersion #>")]
	public static class <#= TimedScopeClassName #>
	{
		/// <summary>
		/// Gets a Dictionary of ScopeName to ScopeDefinition for all Timed Scopes
		/// </summary>
		public static IReadOnlyDictionary<string, TimedScopeDefinition> AllScopeDefinitions
		{
			get
			{
				return s_scopeDefinitions.Value;
			}
		}


		/// <summary>
		/// Dictionary of ScopeName to ScopeDefinition for all Timed Scopes
		/// </summary>
		private static Lazy<Dictionary<string, TimedScopeDefinition>> s_scopeDefinitions = new Lazy<Dictionary<string, TimedScopeDefinition>>(
			() => new Dictionary<string, TimedScopeDefinition>(StringComparer.Ordinal)
		{
<#
	foreach (TimedScopeArea area in ScopeCollection.TimedScopeArea.OrderBy(x => x.name))
	{
		foreach (TimedScope scope in area.TimedScope.OrderBy(x => x.name))
		{
#>
			{ <#= area.StrippedName() #>.<#= scope.name #>.Name, <#= area.StrippedName() #>.<#= scope.name #> },
<#
		}
	}
#>
		});

<#
	foreach (TimedScopeArea area in ScopeCollection.TimedScopeArea.OrderBy(x => x.name))
	{
#>
		/// <summary>
		/// Timed scopes for <#= area.StrippedName() #>
		/// </summary>
		public static class <#= area.StrippedName() #>
		{
<#
	foreach (TimedScope scope in area.TimedScope.OrderBy(x => x.name))
	{
#>
			/// <summary>
			/// <#= scope.name #> Timed Scope
			/// </summary>
			public static TimedScopeDefinition <#= scope.name #> => new TimedScopeDefinition("<#= area.StrippedName() #>_<#= scope.name #>",
				"<#= scope.FormatDescription() #>"<# if (scope.OCEHandBookLink != null)
					{
#>,
				linkToOCEHandbook: @"<#= scope.OCEHandBookLink #>"<#
	}
#><# if (scope.onDemand)
					{
#>,
				onDemand: <#= scope.onDemand.ToString().ToLower() #><#
	}
#><# if (scope.capturesUniqueUserHashes)
					{
#>,
				capturesUniqueUserHashes: <#= scope.capturesUniqueUserHashes.ToString().ToLower() #><#
	}
#>);

<#
	}
#>

		}


<#
	}
#>

	}
}
